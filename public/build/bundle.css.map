{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Answer.svelte",
    "Filters.svelte",
    "History.svelte",
    "Infinite.svelte",
    "Kanji.svelte",
    "Nav.svelte",
    "Quizz.svelte",
    "Score.svelte",
    "SlideText.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { slide } from \"svelte/transition\";\n    import SlideText from \"./SlideText.svelte\";\n\n    export let answer;\n    export let animate = true;\n</script>\n\n{#if answer}\n    {#if answer.isCorrect}\n    <SlideText shouldSlide={animate}>{answer.kana} ✔</SlideText>\n    {:else}\n    <SlideText shouldSlide={animate}>{answer.kana} ≠ {answer.userInput} ❌ 『{answer.correctAnswer}』</SlideText>\n    {/if}\n{:else}\n    <h1 out:slide>Your previous answers are displayed here.</h1>\n{/if}\n\n<style lang=\"scss\">h1 {\n  text-align: center; }\n</style>",
    "<script>\n    import { slide } from \"svelte/transition\";\n\n    export let choices = [];\n    export let group;\n\n    let showFilters = false;\n</script>\n\n<div class=\"filters\">\n    <button class=\"filters__btn\" on:click={() => showFilters = !showFilters}>Show Filters</button>\n    {#if showFilters}\n    <ul transition:slide class=\"filters__items\">\n        {#each choices as choice}\n        <li class=\"filters__item\">\n            <label>\n                <input type=\"checkbox\" bind:group value={choice}>\n                {choice}\n            </label>\n        </li>\n        {/each}\n    </ul>\n    {/if}\n</div>\n\n<style lang=\"scss\">.filters {\n  position: fixed;\n  top: 0;\n  left: 0; }\n  .filters__items {\n    padding: 1.5em;\n    border-radius: .5em;\n    box-shadow: 0 0.5em 1.5em rgba(0, 0, 0, 0.15); }\n  .filters__item {\n    cursor: pointer;\n    border: .2em solid #ff3e00;\n    padding: .25em 1em;\n    border-radius: .25em; }\n    .filters__item:not(:last-child) {\n      margin-bottom: .5em; }\n</style>",
    "<script>\n    import { slide } from \"svelte/transition\";\n    import Answer from \"./Answer.svelte\";\n\n    export let data;\n\n    let hidden = true;\n\n    $: [lastAnswer, ...rest] = data;\n</script>\n\n<Answer answer={lastAnswer} />\n{#if data.length > 1}\n<button transition:slide on:click={() => hidden = !hidden}>\n    {hidden\n        ? \"詳細「しょうさい」\"\n        : \"隠す「かくす」\"}\n</button>\n{/if}\n{#if !hidden}\n{#each rest as answer}\n<Answer answer={answer} />\n{/each}\n{/if}\n\n<style lang=\"scss\">button {\n  cursor: pointer;\n  color: #ff3e00;\n  border: 2px solid currentColor;\n  background: none;\n  padding: .5em 2em;\n  margin-top: 2em; }\n</style>",
    "<script>\n    import { slide } from \"svelte/transition\";\n    import kana from \"../kana\";\n    import MultiQuizz from \"./MultiQuizz.svelte\";\n\n    let choices = Object.keys(kana);\n    let showFilters = false;\n    let wanted = [choices[0]];\n\n    const getCharacters = filter => {\n        const result = [];\n        for (const type in kana) {\n            if (!filter.includes(type)) continue;\n\n            const chars = kana[type];\n            result.push(...chars);\n        }\n        \n        return result;\n    };\n\n    let characters = getCharacters(wanted);\n\n    $: characters = getCharacters(wanted);\n</script>\n\n<main>\n    <div class=\"filters\">\n        <button class=\"filters__btn\" on:click={() => showFilters = !showFilters}>Show Filters</button>\n        {#if showFilters}\n        <ul transition:slide class=\"filters__items\">\n            {#each choices as choice}\n            <li class=\"filters__item\">\n                <label>\n                    <input type=\"checkbox\" bind:group={wanted} value={choice}>\n                    {choice}\n                </label>\n            </li>\n            {/each}\n        </ul>\n        {/if}\n    </div>\n\t<MultiQuizz\n\t\theading=\"かな\"\n        shouldFilter={false}\n        {characters}\n    />\n</main>\n\n<style lang=\"scss\">.filters {\n  position: fixed;\n  top: 0;\n  left: 0; }\n  .filters__items {\n    padding: 1.5em;\n    border-radius: .5em;\n    box-shadow: 0 0.5em 1.5em rgba(0, 0, 0, 0.15); }\n  .filters__item {\n    cursor: pointer;\n    border: .2em solid #ff3e00;\n    padding: .25em 1em;\n    border-radius: .25em; }\n    .filters__item:not(:last-child) {\n      margin-bottom: .5em; }\n</style>",
    "<script>\n    import { slide } from \"svelte/transition\";\n    import kanji from \"../kanji\";\n    import MultiQuizz from \"./MultiQuizz.svelte\";\n\n    let choices = Object.keys(kanji);\n    let showFilters = false;\n    let wanted = [choices[0]];\n\n    const getCharacters = filter => {\n        const result = [];\n        for (const type in kanji) {\n            if (!filter.includes(type)) continue;\n\n            const chars = kanji[type];\n            result.push(...chars);\n        }\n        \n        return result;\n    };\n\n    let characters = getCharacters(wanted);\n\n    $: characters = getCharacters(wanted);\n</script>\n\n<main>\n    <div class=\"filters\">\n        <button class=\"filters__btn\" on:click={() => showFilters = !showFilters}>Show Filters</button>\n        {#if showFilters}\n        <ul transition:slide class=\"filters__items\">\n            {#each choices as choice}\n            <li class=\"filters__item\">\n                <label>\n                    <input type=\"checkbox\" bind:group={wanted} value={choice}>\n                    {choice}\n                </label>\n            </li>\n            {/each}\n        </ul>\n        {/if}\n    </div>\n    <MultiQuizz\n        heading=\"漢字\"\n        shouldFilter={false}\n        {characters}\n    />\n</main>\n\n<style lang=\"scss\">.filters {\n  position: fixed;\n  top: 0;\n  left: 0; }\n  .filters__items {\n    padding: 1.5em;\n    border-radius: .5em;\n    box-shadow: 0 0.5em 1.5em rgba(0, 0, 0, 0.15); }\n  .filters__item {\n    cursor: pointer;\n    border: .2em solid #ff3e00;\n    padding: .25em 1em;\n    border-radius: .25em; }\n    .filters__item:not(:last-child) {\n      margin-bottom: .5em; }\n</style>",
    "<script>\n    import { createEventDispatcher } from \"svelte\";\n\n    export let currentLink;\n\n    const dispatch = createEventDispatcher();\n    const links = [\n        { name: \"Infinite Kana\", link: \"infinite\" },\n        { name: \"Infinite Kanji\", link: \"kanji\" },\n    ];\n\n    const handleClick = link => () => {\n        isVisible = false;\n        dispatch(\"change\", { link });\n    };\n\n    $: filteredLinks = links.filter(({ link }) => link !== currentLink);\n\n    let isVisible = false;\n</script>\n\n<nav class=\"nav\">\n    <button class=\"nav__button\" on:click={() => isVisible = !isVisible}>\n        {isVisible ? \"Close\" : \"Open\"}\n    </button>\n{#if isVisible}\n    <ul class=\"nav__links\">\n        {#each filteredLinks as { name, link }}\n        <li class=\"nav__link\" on:click={handleClick(link)}>{name}</li>\n        {/each}\n    </ul>\n{/if}\n</nav>\n\n<style lang=\"scss\">.nav {\n  position: fixed;\n  top: 0;\n  right: 0; }\n  .nav__button {\n    position: absolute;\n    top: 0;\n    right: 0; }\n  .nav__links {\n    position: absolute;\n    top: 3em;\n    right: 0; }\n  .nav__link {\n    cursor: pointer;\n    padding: 1em;\n    background-color: rgba(255, 165, 0, 0.25);\n    border-radius: .5em; }\n</style>",
    "<script>\n    import { createEventDispatcher } from \"svelte\";\n    import { scale } from \"svelte/transition\";\n\n    const dispatch = createEventDispatcher();\n\n    export let heading = \"ひらがな\";\n    export let shouldFilter = true;\n    export let kana;\n    export let correctAnswer;\n\n    let userInput = \"\";\n    let showHint = false;\n    let input = null;\n\n    const handleSubmit = () => {\n        if (!userInput) return;\n\n        const result = { userInput, kana, correctAnswer };\n\n        if (correctAnswer instanceof Array)\n            result.isCorrect = correctAnswer.includes(userInput);\n        else\n            result.isCorrect = userInput === correctAnswer;\n\n        dispatch(\"answer\", result);\n        userInput = \"\";\n        showHint = false;\n    };\n\n    const handleChange = e => {\n        userInput = e.target.value.trim();\n\n        if (shouldFilter)\n            userInput = userInput.replace(/[^A-Za-z]/g, \"\");\n    };\n\n    const handleShowHint = () => showHint = !showHint;\n\n    $: {\n        if (input && showHint === false)\n            input.focus();\n    }\n</script>\n{#if showHint}\n<div transition:scale class=\"quizz__hint\">\n    {#if correctAnswer instanceof Array}\n    <ul>\n        {#each correctAnswer as answer}\n            <li><h1>\b• {answer}</h1></li>\n        {/each}\n    </ul>\n    {:else}\n    <h1>{correctAnswer}</h1>\n    {/if}\n</div>\n{/if}\n<h1 class=\"quizz__heading\">{heading}</h1>\n<article class=\"quizz\">\n    <h2 class=\"quizz__kana\" on:click={handleShowHint}>{kana}</h2>\n    <form class=\"quizz__form\" on:submit|preventDefault={handleSubmit}>\n        <input bind:this={input} class=\"quizz__input\" type=\"text\" value={userInput} on:input={handleChange}>\n        <button class=\"quizz__button\" type=\"submit\">次「つぎ」</button>\n    </form>\n</article>\n\n<style lang=\"scss\">.quizz {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: .5em solid currentColor;\n  border-radius: 1em;\n  margin: 2em 0;\n  padding: 2em 15vw; }\n  .quizz__hint {\n    position: fixed;\n    top: 2em;\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: white;\n    padding: 1em 2em;\n    border-radius: .5em;\n    box-shadow: 0 0.5em 1em rgba(0, 0, 0, 0.15); }\n  .quizz__heading {\n    font-size: 3em;\n    text-align: center; }\n  .quizz__kana {\n    cursor: pointer;\n    font-size: 8em;\n    user-select: none;\n    transition: transform 200ms; }\n    .quizz__kana:hover {\n      transform: scale(1.1); }\n    .quizz__kana:active {\n      transform: scale(0.9); }\n  .quizz__form {\n    display: flex;\n    flex-direction: column;\n    align-items: center; }\n  .quizz__button {\n    border: none;\n    background-color: #ff3e00;\n    color: white;\n    width: 100%;\n    padding: .5em; }\n</style>",
    "<script>\n    export let winCount = 0;\n    export let failCount = 0;\n</script>\n\n<h1 class=\"answers\">\n    <span class=\"answers__correct\">{winCount}</span>\n    - \n    <span class=\"answers__incorrect\">{failCount}</span>\n</h1>\n\n<style lang=\"scss\">.answers__correct {\n  color: green; }\n\n.answers__incorrect {\n  color: red; }\n</style>",
    "<script>\n    import { slide } from \"svelte/transition\";\n\n    export let shouldSlide = true;\n</script>\n\n{#if shouldSlide}\n<h1 transition:slide><slot/></h1>\n{:else}\n<h1><slot/></h1>\n{/if}\n\n<style lang=\"scss\">h1 {\n  text-align: center; }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}